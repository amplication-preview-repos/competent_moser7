/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NurseMonitoringChartService } from "../nurseMonitoringChart.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NurseMonitoringChartCreateInput } from "./NurseMonitoringChartCreateInput";
import { NurseMonitoringChart } from "./NurseMonitoringChart";
import { NurseMonitoringChartFindManyArgs } from "./NurseMonitoringChartFindManyArgs";
import { NurseMonitoringChartWhereUniqueInput } from "./NurseMonitoringChartWhereUniqueInput";
import { NurseMonitoringChartUpdateInput } from "./NurseMonitoringChartUpdateInput";
import { NurseMedicationChartUpdateManyWithoutPatientsInput } from "../../patient/base/NurseMedicationChartUpdateManyWithoutPatientsInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NurseMonitoringChartControllerBase {
  constructor(
    protected readonly service: NurseMonitoringChartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NurseMonitoringChart })
  @nestAccessControl.UseRoles({
    resource: "NurseMonitoringChart",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createNurseMonitoringChart(
    @common.Body() data: NurseMonitoringChartCreateInput
  ): Promise<NurseMonitoringChart> {
    return await this.service.createNurseMonitoringChart({
      data: {
        ...data,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        bp: true,
        createdAt: true,
        date: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        spo2: true,
        time: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [NurseMonitoringChart] })
  @ApiNestedQuery(NurseMonitoringChartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NurseMonitoringChart",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async nurseMonitoringCharts(
    @common.Req() request: Request
  ): Promise<NurseMonitoringChart[]> {
    const args = plainToClass(NurseMonitoringChartFindManyArgs, request.query);
    return this.service.nurseMonitoringCharts({
      ...args,
      select: {
        bp: true,
        createdAt: true,
        date: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        spo2: true,
        time: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NurseMonitoringChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMonitoringChart",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async nurseMonitoringChart(
    @common.Param() params: NurseMonitoringChartWhereUniqueInput
  ): Promise<NurseMonitoringChart | null> {
    const result = await this.service.nurseMonitoringChart({
      where: params,
      select: {
        bp: true,
        createdAt: true,
        date: true,
        id: true,

        patient: {
          select: {
            id: true,
          },
        },

        spo2: true,
        time: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NurseMonitoringChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMonitoringChart",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateNurseMonitoringChart(
    @common.Param() params: NurseMonitoringChartWhereUniqueInput,
    @common.Body() data: NurseMonitoringChartUpdateInput
  ): Promise<NurseMonitoringChart | null> {
    try {
      return await this.service.updateNurseMonitoringChart({
        where: params,
        data: {
          ...data,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          bp: true,
          createdAt: true,
          date: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          spo2: true,
          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NurseMonitoringChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMonitoringChart",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteNurseMonitoringChart(
    @common.Param() params: NurseMonitoringChartWhereUniqueInput
  ): Promise<NurseMonitoringChart | null> {
    try {
      return await this.service.deleteNurseMonitoringChart({
        where: params,
        select: {
          bp: true,
          createdAt: true,
          date: true,
          id: true,

          patient: {
            select: {
              id: true,
            },
          },

          spo2: true,
          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generate-nurse-monitoring-charts")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateNurseMonitoringCharts(
    @common.Body()
    body: NurseMedicationChartUpdateManyWithoutPatientsInput
  ): Promise<string> {
    return this.service.GenerateNurseMonitoringCharts(body);
  }
}
