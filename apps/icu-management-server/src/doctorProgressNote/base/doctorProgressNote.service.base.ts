/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DoctorProgressNote as PrismaDoctorProgressNote,
  Patient as PrismaPatient,
} from "@prisma/client";

import { DoctorProgressNoteUpdateManyWithoutPatientsInput } from "../../patient/base/DoctorProgressNoteUpdateManyWithoutPatientsInput";

export class DoctorProgressNoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DoctorProgressNoteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.doctorProgressNote.count(args);
  }

  async doctorProgressNotes(
    args: Prisma.DoctorProgressNoteFindManyArgs
  ): Promise<PrismaDoctorProgressNote[]> {
    return this.prisma.doctorProgressNote.findMany(args);
  }
  async doctorProgressNote(
    args: Prisma.DoctorProgressNoteFindUniqueArgs
  ): Promise<PrismaDoctorProgressNote | null> {
    return this.prisma.doctorProgressNote.findUnique(args);
  }
  async createDoctorProgressNote(
    args: Prisma.DoctorProgressNoteCreateArgs
  ): Promise<PrismaDoctorProgressNote> {
    return this.prisma.doctorProgressNote.create(args);
  }
  async updateDoctorProgressNote(
    args: Prisma.DoctorProgressNoteUpdateArgs
  ): Promise<PrismaDoctorProgressNote> {
    return this.prisma.doctorProgressNote.update(args);
  }
  async deleteDoctorProgressNote(
    args: Prisma.DoctorProgressNoteDeleteArgs
  ): Promise<PrismaDoctorProgressNote> {
    return this.prisma.doctorProgressNote.delete(args);
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.doctorProgressNote
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
  async GenerateDoctorProgressNotes(
    args: DoctorProgressNoteUpdateManyWithoutPatientsInput
  ): Promise<string> {
    throw new Error("Not implemented");
  }
}
