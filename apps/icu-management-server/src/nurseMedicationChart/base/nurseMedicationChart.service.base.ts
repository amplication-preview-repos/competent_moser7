/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NurseMedicationChart as PrismaNurseMedicationChart,
  Patient as PrismaPatient,
} from "@prisma/client";

import { NurseMedicationChartUpdateManyWithoutPatientsInput } from "../../patient/base/NurseMedicationChartUpdateManyWithoutPatientsInput";

export class NurseMedicationChartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NurseMedicationChartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nurseMedicationChart.count(args);
  }

  async nurseMedicationCharts(
    args: Prisma.NurseMedicationChartFindManyArgs
  ): Promise<PrismaNurseMedicationChart[]> {
    return this.prisma.nurseMedicationChart.findMany(args);
  }
  async nurseMedicationChart(
    args: Prisma.NurseMedicationChartFindUniqueArgs
  ): Promise<PrismaNurseMedicationChart | null> {
    return this.prisma.nurseMedicationChart.findUnique(args);
  }
  async createNurseMedicationChart(
    args: Prisma.NurseMedicationChartCreateArgs
  ): Promise<PrismaNurseMedicationChart> {
    return this.prisma.nurseMedicationChart.create(args);
  }
  async updateNurseMedicationChart(
    args: Prisma.NurseMedicationChartUpdateArgs
  ): Promise<PrismaNurseMedicationChart> {
    return this.prisma.nurseMedicationChart.update(args);
  }
  async deleteNurseMedicationChart(
    args: Prisma.NurseMedicationChartDeleteArgs
  ): Promise<PrismaNurseMedicationChart> {
    return this.prisma.nurseMedicationChart.delete(args);
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.nurseMedicationChart
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }
  async GenerateNurseMedicationCharts(
    args: NurseMedicationChartUpdateManyWithoutPatientsInput
  ): Promise<string> {
    throw new Error("Not implemented");
  }
}
