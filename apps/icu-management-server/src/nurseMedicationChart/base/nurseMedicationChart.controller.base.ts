/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NurseMedicationChartService } from "../nurseMedicationChart.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NurseMedicationChartCreateInput } from "./NurseMedicationChartCreateInput";
import { NurseMedicationChart } from "./NurseMedicationChart";
import { NurseMedicationChartFindManyArgs } from "./NurseMedicationChartFindManyArgs";
import { NurseMedicationChartWhereUniqueInput } from "./NurseMedicationChartWhereUniqueInput";
import { NurseMedicationChartUpdateInput } from "./NurseMedicationChartUpdateInput";
import { NurseMedicationChartUpdateManyWithoutPatientsInput } from "../../patient/base/NurseMedicationChartUpdateManyWithoutPatientsInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NurseMedicationChartControllerBase {
  constructor(
    protected readonly service: NurseMedicationChartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NurseMedicationChart })
  @nestAccessControl.UseRoles({
    resource: "NurseMedicationChart",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createNurseMedicationChart(
    @common.Body() data: NurseMedicationChartCreateInput
  ): Promise<NurseMedicationChart> {
    return await this.service.createNurseMedicationChart({
      data: {
        ...data,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        id: true,
        medication: true,

        patient: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [NurseMedicationChart] })
  @ApiNestedQuery(NurseMedicationChartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NurseMedicationChart",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async nurseMedicationCharts(
    @common.Req() request: Request
  ): Promise<NurseMedicationChart[]> {
    const args = plainToClass(NurseMedicationChartFindManyArgs, request.query);
    return this.service.nurseMedicationCharts({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        medication: true,

        patient: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NurseMedicationChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMedicationChart",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async nurseMedicationChart(
    @common.Param() params: NurseMedicationChartWhereUniqueInput
  ): Promise<NurseMedicationChart | null> {
    const result = await this.service.nurseMedicationChart({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        medication: true,

        patient: {
          select: {
            id: true,
          },
        },

        time: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NurseMedicationChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMedicationChart",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateNurseMedicationChart(
    @common.Param() params: NurseMedicationChartWhereUniqueInput,
    @common.Body() data: NurseMedicationChartUpdateInput
  ): Promise<NurseMedicationChart | null> {
    try {
      return await this.service.updateNurseMedicationChart({
        where: params,
        data: {
          ...data,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          id: true,
          medication: true,

          patient: {
            select: {
              id: true,
            },
          },

          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NurseMedicationChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NurseMedicationChart",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteNurseMedicationChart(
    @common.Param() params: NurseMedicationChartWhereUniqueInput
  ): Promise<NurseMedicationChart | null> {
    try {
      return await this.service.deleteNurseMedicationChart({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          medication: true,

          patient: {
            select: {
              id: true,
            },
          },

          time: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/generate-nurse-medication-charts")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GenerateNurseMedicationCharts(
    @common.Body()
    body: NurseMedicationChartUpdateManyWithoutPatientsInput
  ): Promise<string> {
    return this.service.GenerateNurseMedicationCharts(body);
  }
}
